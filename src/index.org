#+TITLE:     Kotlin Tutorial
#+AUTHOR:    Reinhard Braumandl
#+DESCRIPTION: Ein kleines Tutorial zur Programmiersprache Kotlin
#+KEYWORDS:  kotlin, tutorial
#+LANGUAGE:  de
#+OPTIONS:   toc:2
#+OPTIONS: H:4
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-bigblow.setup

* Die Programmiersprache Kotlin

Die Programmiersprache Kotlin wurde von JetBrains im Jahre 2011 vorgestellt.
Die Hauptentwicklung findet in Sankt Petersburg statt und der Name Kotlin stammt
von einer Insel, die vor Sankt Petersburg liegt.

Die Entwickler von Kotlin hatten die Programmiersprache Scala
bezüglich den Programmiersprachen-Features im Blick, wobei Ihnen aber die
Geschwindigkeit des Scala Compilers zu gering und die Kompatibilität
zu Java nicht ausreichend genug waren. Kotlin ist daher keine kleine
Programmiersprache, da versucht wird, möglicht viele Features von Scala
zu realisieren, aber trotzdem kompatibler zu Java zu sein. Das führt zu
relativ vielen Kompromissen und geringerer Orthogonalität bei der Nutzung
von Programmiersprachenkonstrukten. 

Kotlin ist also eher in der Tradition einer Reihe von aktuellen
Programmiersprachen zu sehen, die eher pragmatisch als theoretisch
fundiert und minimalistisch auftreten. Kehrseite der Medaille ist dann
meist, dass die von diesen Programmiersprachen unterstützten
Konstrukte im Laufe der Enwicklung immer weiter ausufern.

Wie schon von neueren Versionen von Java und vor allem Scala bekannt,
ist Kotlin eine objekt-orientierte Programmiersprache, die
verschiedene Anleihen aus den funktionalen Programmiersprachen nimmt.

* Zielsetzung

In diesem Tutorial werden wir definitiv nicht alle Details der Sprache
Kotlin vorstellen, sondern versuchen neben dem notwendigen Grundstock
die Features zu vermitteln, die Kotlin auszeichnen und die
unterschiedlich zu Java sind. Wir werden uns auch nur das Java Backend
Einsatzszenario von Kotlin ansehen.

Die vollständige Definition der Progammiersprache ist auf deren
Hauptseite im Web zu finden:
[[https://kotlinlang.org/][Kotlin Hauptseite]]

* Erste Versuche auf der Kommandozeile

Wir starten das Kennenlernen mit der Programmiersprache Kotlin auf
Kommandozeilenebene und nicht gleich in der für Kotlin prädestinierten
IDE IntelliJ. Hierdurch bekommt man eher ein Gefühlt dafür, wie die
Integration mit der Java Plattform realisiert ist - das zumindest ist
unsere Meinung.

Wir nutzen dabei im folgenden eine Linux Installation, um die
Beispiele durchzuspielen. In den Beispielen zeigt der Prompt ~>~ den
Bash Prompt (Linux Shell) an und ~>>>~ den Prompt der Kotlin Shell.

Hierzu müssen wir auf dem Computer des Lesers zunächst das separat
erhältliche Paket mit den Kotlin Kommandozeilen Tools installieren.
Das Paket mit dem Kommandozeilen Compiler ist vom [[https://kotlinlang.org/docs/tutorials/command-line.html][Kotlin Webauftritt]]
zu beziehen, wobei auch eine Anleitung für die Installation gegeben
ist. Das Prozedere der Installation sei als dem Leser überlassen.

Wie auch Java seit Version 9 bietet auch Kotlin die Möglichkeit
Programmkonstrukte in der Kotlin Shell auszuprobieren. Der Aufruf der
Kotlin Shell erfolgt einfach 

Ein minimales und traditionsreiches, erstes Kotlin Programm sieht so
aus:
#+begin_src kotlin :exports none
fun main() {
    println("Hello world")
}
#+end_src
Im Gegensatz zu Java gibt es in Kotlin top-level Funktionen und die
Funktion ~main()~ als ein möglicher Einstiegspunkt eines Kotlin
Programms ist eine solche Funktion. Diesen Code kann man auch einfach
in die Kotlin Shell kopieren und dann aufrufen.

#+begin_example
>>> fun main() {
...     println("Hello world")
... }
>>> main()
Hello world
#+end_example


Wenn wir diesen Code in der Datei HelloWorld.kt abspeichern und dann
den Compiler folgendermaßen aufrufen:
#+begin_src sh
> kotlinc HelloWorld.kt 
#+end_src
sehen wir, dass eine Java Class Datei und ein Meta-Inf Verzeichnis mit
der Datei main.kotlin.module erzeugt wurde:
#+begin_example
.:
HelloWorld.kt  HelloWorldKt.class  META-INF

./META-INF:
main.kotlin_module
#+end_example
Die Datei ~main.kotlin_module~ ist dabei ein Hilfskonstrukt, das dem
Kotlin Compiler hilft, Aufrufe von top-level Funktionen beim Linken
auszulösen. Wir müssen uns nicht weiter um diese Datei kümmern.

Ein Dekompilieren der Class Datei mit javap zeigt, dass aus
Kompatibilitätsgründen mit Java auch die klassische ~public static void
main(String[] args)~ Methode erzeugt worden ist. 
#+begin_example
> javap HelloWorldKt.class 

Compiled from "HelloWorld.kt"
public final class HelloWorldKt {
  public static final void main();
  public static void main(java.lang.String[]);
}
#+end_example
Diese ist wegen der Nutzung des Java Laufzeitsystem notwendig und wird
genutzt, um die Methode ~void main()~ aufzurufen, die für die
top-level ~main()~ Funktion erzeugt wurde. Aufgerufen wird das
Programm mit dem Java Interpreter und bei diesem Aufruf wird natürlich die
~void main(String[] args)~ Methode aufgerufen:
#+begin_src sh
java HelloWorldKt
#+end_src
Wir sehen im Aufruf und auch der dekompilierten Klasse, dass die
Klasse ~HelloWorldKt~ im Java ByteCode erzeugt wurde. Diese Klassen,
deren Namen sich ergeben aus dem Dateinamen und dem Suffix Kt werden
genutzt, um den Code der top-level Kotlin Funktionen aufzunehmen.

Es kann auch ganz klassisch die main Methode von Java in Kotlin
genutzt werden. 
#+begin_src kotlin :exports both

fun main(args: Array<String>) {
    println(args.contentToString())
}

main(arrayOf("Eins","Zwei"))
#+end_src

#+RESULTS:
: [Eins, Zwei]
: res7: kotlin.String = >>> 

Wenn man jetzt versucht, eine Kotlin Datei mit der klassischen main
Methode zu kompilieren und per Java Interpreter auszuführen, wird man
eine Fehlermeldung erhalten, obwohl das Beispiel in der Kotlin Shell funktioniert:
#+begin_example
> java HelloWorldKt
Exception in thread "main" java.lang.NoClassDefFoundError: kotlin/jvm/internal/Intrinsics
	at HelloWorldKt.main(HelloWorld.kt)
Caused by: java.lang.ClassNotFoundException: kotlin.jvm.internal.Intrinsics
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)
	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)
	... 1 more

#+end_example
Grund dafür ist, dass Kotlin eine eigene Laufzeitbibliothek besitzt,
die wir im Programm durch die Nutzung der ~Array~ Klasse referenzieren,
aber das Java Laufzeitsystem diese Bibliothek im Normalfall nicht
kennt. Ein einfacher Weg das Problem zu umgehen, ist die Nutzung des
Programms kotlin, das im Kommandozeilen Paket von Kotlin enthalten ist
und die Einbindung des Laufzeitsystems übernimmt:
#+begin_example
> kotlin HelloWorldKt Eins Zwei
[Eins, Zwei]
#+end_example
Es kann natürlich auch der Java Interpreter genutzt werden, wenn man
die passende Bibliothek aus dem Kotlin Paket mit einbindet:
#+begin_example
> java -classpath ~/programme/kotlinc/lib/kotlin-stdlib.jar:. HelloWorldKt Eins Zwei
[Eins, Zwei]
#+end_example

Eine andere Alternative für stand-alone Programme ist, das Bauen einer
Jar Datei, die das Laufzeitsystem von Kotlin enthält:
#+begin_example
> kotlinc -include-runtime HelloWorld.kt -d HelloWorld.jar
> java -jar HelloWorld.jar Eins Zwei
[Eins, Zwei]
#+end_example
An der Größe der Jar Datei von etwa 1,5 MByte erkennt man gleich, dass
hier etwas mehr Code als der aus dem Beispiel mit abgelegt wurde. Es
sollte klar sein, dass die ~-include-runtime~ Option nicht bei der
Erstellung von Bibliotheken genutzt werden sollte, da die Runtime von
Kotlin jeweils nur im Code von lauffähigen Programmen benötigt wird
und wie oben gezeigt auch über die Referenz der passenden Runtime
Bibliothek eingebunden werden kann.

* Elementare Datentypen und Ausdrücke

** Elementare Datentypen

** Ausdrücke

* Grundkonstruktion von Programmen

** Top Level Konstrukte der Programmiersprache


*** Funktionen

*** Properties	

*** Interfaces

*** Klassen


** Organisation von Source Code

In diesem Abschnitt beschäftigen wir uns mit der Frage, wie man die
zuvor erwähnten top-level Sprachkonstrukte organisiert, um eine
strukturierte Programmentwicklung zu ermöglichen.

*** Modularisierung mittels Packages

*** Aufbau einer Source Code Datei

*** Organisation der Dateiablage

*** Sichtbarkeitsregeln


